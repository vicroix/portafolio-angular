[
  {
    "id": "1",
    "titulo": "Monopoly en java",
    "descripcion": [
      {
        "tipo": "titulo",
        "contenido": "Descripción breve"
      },
      {
        "tipo": "parrafo",
        "contenido": "Versión del clásico juego de monopoly, implementado en Java utilizando la interfaz gráfica de Swing"
      },
      {
        "tipo": "titulo",
        "contenido": "Técnologias usadas"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Java",
          "Netbeans",
          "Swing"
        ]
      },
      {
       "tipo": "titulo",
        "contenido": "Objetivo"
      },
      {
        "tipo": "parrafo",
        "contenido": "Este proyecto fue desarrollado para profundizar en los fundamentos de Java, con especial énfasis en la rogramación orientada a objetos. Utilicé NetBeans como entorno de desarrollo y Swing para la creación de la interfaz gráfica de usuario (GUI). \nAunque me enfrenté a varios desafíos a lo largo del proceso, cada uno de ellos me han ayudado a fortalecer mis habilidades tanto en Java como en la resolución de problemas. Esta experiencia me brindó una comprensión más sólida de la estructura y la lógica detrás de las aplicaciones de escritorio en Java.."
      },
      {
        "tipo": "titulo",
        "contenido": "Características del juego"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Tablero de 5x5",
          "1 vs 1",
          "Empiezan con 100 monedas",
          "Las casillas tienen un valor de 60 monedas. Cuando un jugador cae en una casilla, evalua si no tiene propietario, si no tiene, se le habilitara el botón de comprar, si no, permanecerá deshabilitado",
          "Si un jugador cae en la casilla del oponente, se le restara 20 monedas y se le sumara al oponente",
          "Las casillas violetas que tienen una imagen de 3 cartas son de suerte y tienen 3 posibilidades: sumar 20 monedas, sumar 10 monedas o restar 20 monedas",
          "La casilla de cárcel tiene una penalización de 2 turnos",
          "La casilla amarilla que corresponde a la banca te quitan 20 monedas"
        ]
      },
      {
        "tipo": "titulo",
        "contenido": "Clases usadas"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Casillas", "Dado", "Juego", "Jugador", "Tablero"
        ]
      },
      {
        "tipo": "titulo",
        "contenido":"Jugador"
      },
      {
        "tipo": "parrafo",
        "contenido": "Representa a un jugador. Éste tiene los atributos de nombre, número de jugador, banco, victorias, derrotas, penalización y posición"
      },
      {
        "tipo":"parrafo",
        "contenido": [
          "Métodos para obtener y establecer esos atributos, como getBanco(), setBancoSumar() y setNombre()", "setBancoSumar()"
        ]
      },
      {
        "tipo": "titulo",
        "contenido":"Dado"
      },
      {
        "tipo": "parrafo",
        "contenido": "Representa al dado. Tiene atributos como el número que muestra el dado y na ficha asociada."
      },
      {
        "tipo":"lista",
        "contenido": [
          "Métodos para tirar el dado tirarDados()", "Comprobar si el dado es válido comprobarBDado()"
        ]
      },
      {
        "tipo": "titulo",
        "contenido":"Juego"
      },
      {
        "tipo": "parrafo",
        "contenido": "Controla la lógica del juego. Tiene atributos como las opciones de comprar, vender, pasar turno y quén está en turno"
      },
      {
        "tipo":"lista",
        "contenido": [
          "Métodos para verificar y cambiar estos estados, como comprobarBComprar(), venderCasilla(), y comprobarBPasarTurno()"
        ]
      },
      {
        "tipo": "titulo",
        "contenido":"Casillas"
      },
      {
        "tipo": "parrafo",
        "contenido": "Maneja las casillas en el juego, incluyendo la compra, visualización y reset de las casillas."
      },
      {
        "tipo": "lista",
        "contenido": [
          "cargarVisualizarCallesCompradas(): Muestra las calles compradas por los jugadores", "comprarCasilla(): Permite a un jugador comprar una casilla, asignándosela si no pertenece a nadie", "desactivarCallesCompradas(): Desactiva al visualización de las calles compradas", "getCasillas(), getValorCasilla(), getCasillasCompradas(): Obtienen información de las casillas", "imprimirContenido(): Imprime el contenido de las casillas", "nuevaPartidaResetearCalles(): Resetea las visualizaciones de las calles al iniciar una nueva partida", "valorCasilla(): Calcula el valor de una casilla dependiendo de la posicion y el dado", "visualizarCallesCompradas(): Muestra las calles compradas por un jugador en el visualizador"
        ]
      },
      {
        "tipo": "titulo",
        "contenido":"Tablero"
      },
      {
        "tipo": "parrafo",
        "contenido": "Esta clase es la representación visual y lógica del tablero de juego. Hereda de JFrame y maneja la interacción entre los jugadores y las casillas del juego"
      },
      {
        "tipo": "lista",
        "contenido": [
          "JTextField Calle2: Campo de texto para una calle.",
          "JPanel Casilla2: Panel que representa una casilla en el tablero.",
          "Casillas casillas: Instancia de la clase Casillas que maneja las casillas del tablero.",
          "JPanel[] casillasJ1, casillasJ2: Arrays de paneles que representan las casillas de cada jugador.",
          "Dado dado: Objeto para manejar el dado del juego.",
          "Jugador jugador1, jugador2: Los dos jugadores del juego.",
          "Jugador[] jugadores: Array que contiene los jugadores.",
          "JPanel Tablero: Panel que contiene el tablero.",
          "static Juego turno: Representa el turno del juego."
        ]
      },{
        "tipo": "lista",
        "contenido": ["main(): Método principal para iniciar la aplicación.",
    "siAmbosJugadoresPenalizacion(): Si ambos jugadores caen en la cárcel, maneja las penalizaciones.",
    "comprobarCasillaJ1(), comprobarCasillaJ2(): Métodos para comprobar si una casilla está comprada por el otro jugador.",
    "evaluarParaVenderCalle(): Evalúa si una casilla puede ser vendida.",
    "visualizarTablero(): Muestra el tablero visualmente y asigna una imagen a cada jugador."]

      }

    ],
    "imagen": "Megapoly.jpg",
    "enlace": "https://github.com/vicroix/monopoly"
  },
  {
    "id": "2",
    "titulo": "Página web",
    "descripcion": [
      {
        "tipo": "titulo",
        "contenido": "Detalles del Proyecto"
      },
      {
        "tipo": "parrafo",
        "contenido": "Página web para tienda virtual con autentificación que accede a base de datos usando sentencias SQL, javascript y php"

      },
      {
        "tipo": "titulo",
        "contenido": "Características"
      },
      {
        "tipo": "lista",
        "contenido": [
          "JavaScript",
          "HTML5",
          "CSS3",
          "PHP",
          "SQL",
          "ldap",
          "Apache"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
      {
        "tipo": "titulo",
        "contenido": "Puntos clave de la página"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Contiene una barra de navegación con diferentes categorías de productos (Hombre, Mujer, Niños, Niñas, Marcas)",
          "Utiliza una verificación de sesión para mostrar el estado de usuario (loggeado o no)",
          "Los productos se extraen de una base de datos mediante MySQL y se presentan en tarjetas con imagen, nombre, precio y opción de agregar al carrito",
          "Sistema de registro y autentificación de usuarios en PHP, utilizando una base de datos MySQL",
          "Los usuarios pueden registrarse mediante un formulario, donde los datos se almacenan de forma segura con un sistema de cifrado de contraseña usando password_hash en su última versión",
          "Para la autentificación, se realiza una validación de usuario y contraseña utilizando password_verify, asegurando la seguridad del sistema, ya que ni los administradores podran acceder a dicha contraseña",
          "La implemetación incluye redirección  automática después de un registro exitoso o un intento de inicio de sesión, con validaciones de errores claras para mejorar la experiencia de usuario"
        ]
      }
    ],
    "imagen": "inicioMipag.jpg",
    "enlace": "https://github.com/vicroix/Trabajo_Desarrollo_Servidores"
  },
  {
    "id": "3",
    "titulo": "Aplicación CRUD de Pokemon con Angular y Node.js",
    "descripcion": [
      {
        "tipo": "titulo",
        "contenido": "Detalles del Proyecto"
      },
      {
        "tipo": "parrafo",
        "contenido": "Este proyecto es una aplicación web que permite gestionar una lista de Pokemon, implementando una API REST con Node.js y Express, y un cliente en Angular para interactuar con la API"
      },
      {
        "tipo": "titulo",
        "contenido": "Características"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Backend: Node.js, Express.js",
          "Frontend: Angular 19, TypeScript",
          "Estilizado: Tailwind CSS",
          "Comunicación HTTP: Angular HttpClient"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
      {
        "tipo": "titulo",
        "contenido": "Funcionalidades implementadas"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Obtener lista de Pokemon: Listado paginado de Pokemon con limit y offset.",
          "Ver detalles de un Pokemon: Seleccionar un elemento de la lista para ver su ID, nombre, tipo.",
          "Actualizar Pokemon: Modificar el nombre o tipo de un Pokemon existente mediante un formulario.",
          "Eliminar Pokemon: Solo implementado en el backend por ahora, no lo vi en este caso tan necesario."
        ]
      },
      {
        "tipo": "titulo",
        "contenido": "API REST"
      },
      {
        "tipo": "lista",
        "contenido": [
          "GET /api/pokemons: Obtener lista completa o paginada.",
          "GET /api/pokemons/id: Obtener los detalles de un Pokemon por su ID",
          "PUT /api/pokemons/id: Modificar los datos de un Pokemon",
          "DELETE /api/pokemons/id: Elimina un Pokemon por su ID"
        ]
      },
      {
        "tipo": "titulo",
        "contenido": "Cliente Angular"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Servicio (pokemon.service.ts): Gestiona las peticiones HTTP hacia la API.",
          "Componente (pokemon-list.component.ts): Renderiza la lista de Pokemon y permite seleccionar o modificar elementos.",
          "HTML y estilos: Interfaz sencilla y responsiva con Tailwind para mostrar y modificar los datos"
        ]
      },
      {
        "tipo": "titulo",
        "contenido": "Aprendizaje clave"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Configuración de un servidor REST con Express.js.",
          "Manejo de peticiones HTTP con Angular.",
          "Implementación de un CRUD completo",
          "Paginación y gestión de estados en Angular"
        ]
      },
      {
        "tipo": "titulo",
        "contenido": "Mejoras futuras"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Añadir imágenes de los Pokemon.",
          "Implementar la eliminación desde el frontend.",
          "Validaciones de formularios en Angular"
        ]
      }
    ],
    "imagen": "ApiPokemon.jpg",
    "enlace": "https://github.com/vicroix/Angular_APIREST",
    "enlace2": "https://github.com/vicroix/mi-api"
  },
  {
    "id": "4",
    "titulo": "Portafolios en Angular",
    "descripcion": [
      {
        "tipo": "titulo",
        "contenido": "Detalles del Proyecto"
      },
      {
        "tipo": "parrafo",
        "contenido": "Desarrollado en Angular y Tailwindcss"
      },
      {
        "tipo": "titulo",
        "contenido": "Características"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Backend: Node.js",
          "Frontend: Angular 19, TypeScript",
          "Estilizado: Tailwind CSS",
          "Comunicación HTTP: Angular HttpClient"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
      {
        "tipo": "titulo",
        "contenido": "En proceso de rellenar..."
      }
    ],
    "imagen": "Portafolio.png",
    "enlace": "https://github.com/vicroix/portafolio-angular"
  },
  {
    "id": "5",
    "titulo": "Gestor de espacios",
    "descripcion": [
      {
        "tipo": "titulo",
        "contenido": "Detalles del Proyecto"
      },
      {
        "tipo": "parrafo",
        "contenido":"He realizado durante mis prácticas un proyecto ambicioso, cuyo objetivo de la aplicación web es gestionar espacios de teatro."
      },
      {
        "tipo": "parrafo",
        "contenido":"Tienes dos roles, administrador y profesor. Los profesores pueden realizar reservas, editar reservas o eliminarlas. Mientras que el administrador puede gestionar los espacios, añadir nuevos espacios, editarlos y eliminarlos."
      },
      {
        "tipo": "titulo",
        "contenido": "Tecnologías principales:"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Laravel",
          "TailwindCSS",
          "Alpine.js"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
          {
        "tipo": "titulo",
        "contenido": "Librerías adicionales:"
      },
      {
        "tipo": "lista",
        "contenido": [
          "Choices.js"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
          {
        "tipo": "titulo",
        "contenido": "APIs integradas:"
      },
      {
        "tipo": "lista",
        "contenido": [
          "FullCalendar API",
          "Mapbox GL JS",
          "Elfsight Reviews Widget (con reseñas de Google)"
        ],
        "clases": "list-disc list-inside space-y-2 text-lg"
      },
      {
        "tipo": "titulo",
        "contenido": "En proceso de rellenar..."
      }
    ],
    "imagen": "teatroGest.jpg",
    "enlace": "https://github.com/vicroix/gestion_espacios",
    "video": "videoComercial.mp4"
  }
]

